// Copyright 2018 VMware, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: Wavefront
// $description: Adapter to deliver metrics to VMware Wavefront.
// $location: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/wavefront.html
// $aliases:
// $  - /docs/reference/config/adapters/wavefront.html

// The `wavefront` adapter collects metrics and makes them available to
// [VMware Wavefront](https://www.wavefront.com/).
//
// This adapter supports the [metric template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/metric/).
package wavefront.config;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package="config";

// config for wavefront
message Params {
  // the wavefront service credentials
  oneof credentials {
    // the wavefront server credentials
    WavefrontDirect direct = 1;
    // the wavefront proxy credentials
    WavefrontProxy proxy = 2;
  }

  // represents wavefront server credentials
  message WavefrontDirect {
    // the wavefront server
    string server = 1;
    // the wavefront token
    string token = 2;
  }

  // represents wavefront proxy credentials
  message WavefrontProxy {
    // the wavefront proxy address
    string address = 1;
  }

  // the metrics flush interval
  google.protobuf.Duration flush_interval = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];

  // the prefix to prepend metrics with
  string prefix = 4;

  // the metrics
  repeated MetricInfo metrics = 5;

  // represents a metric
  message MetricInfo {
    // the metric name
    string name = 1;
    // the metric type
    Type type = 2;

    // represents metric types as in https://docs.wavefront.com/metric_types.html
    enum Type {
      // reserved for unknown metric types
      UNKNOWN = 0;
      // represents a gauge metric type
      GAUGE = 1;
      // represents a counter metric type
      COUNTER = 2;
      // represents a delta counter metric type
      DELTA_COUNTER = 3;
      // represents a histogram metric type
      HISTOGRAM = 4;
    }

    // for metrics with type HISTOGRAM, this provides the sample definition
    Sample sample = 3;

    // represents a sample as in https://github.com/rcrowley/go-metrics
    message Sample {
      // the sample definition
      oneof definition {
        // the exponentially decaying sample definition
        ExpDecay exp_decay = 1;
	// the uniform sample definition
	Uniform uniform = 2;
      }

      // represents an exponentially decaying sample
      message ExpDecay {
        // the reservoir size
        int32 reservoir_size = 1;
	// the alpha
	double alpha = 2;
      }

      // represents a uniform sample
      message Uniform {
        // the reservoir size
        int32 reservoir_size = 1;
      }
    }
  }
}

# this config is created through command
# mixgen adapter -c $GOPATH/src/istio.io/istio/mixer/adapter/wavefront/config/config.proto_descriptor -o $GOPATH/src/istio.io/istio/mixer/adapter/wavefront/config -s=false -n wavefront -t metric
apiVersion: "config.istio.io/v1alpha2"
kind: adapter
metadata:
  name: wavefront
  namespace: istio-system
spec:
  description: 
  session_based: false
  templates:
  - metric
  config: 
---
